syntax = "proto3";
// Automatically generated by goyang https://github.com/openconfig/goyang
// compiled 2018-01-23T11:43:10Z
// do not delete the next line
// goyang-version 1
// module "ietf-routing"
// revision "2017-10-14"
// revision "2016-11-04"
// namespace "urn:ietf:params:xml:ns:yang:ietf-routing"

// This YANG module defines essential components for the management
// of a routing subsystem.
// 
// Copyright (c) 2017 IETF Trust and the persons
// identified as authors of the code.  All rights reserved.
// 
// Redistribution and use in source and binary forms, with or
// without modification, is permitted pursuant to, and subject
// to the license terms contained in, the Simplified BSD License
// set forth in Section 4.c of the IETF Trust's Legal Provisions
// Relating to IETF Documents
// (http://trustee.ietf.org/license-info).
// 
// This version of this YANG module is part of RFC XXXX; see
// the RFC itself for full legal notices.
package ietf_routing;
service Rib {
  rpc ActiveRoute (Empty) returns (ActiveRouteResponse);
}
message Routing_Rib_ActiveRoute_ActiveRouteResponse {
  // The active RIB route for the specified destination.
  // 
  // If no route exists in the RIB for the destination
  // address, no output is returned.
  // 
  // Address-family-specific modules MUST augment this
  // container with appropriate route contents.
  Routing_Rib_ActiveRoute_ActiveRouteResponse_Route route = 1;
}

message Empty { }
service Rib {
  rpc ActiveRoute (Empty) returns (ActiveRouteResponse);
}
message RoutingState_Rib_ActiveRoute_ActiveRouteResponse {
  // The active RIB route for the specified
  // destination.
  // 
  // If no route exists in the RIB for the destination
  // address, no output is returned.
  // 
  // Address-family-specific modules MUST augment this
  // container with appropriate route contents.
  RoutingState_Rib_ActiveRoute_ActiveRouteResponse_Route route = 1;
}

message Empty { }

// Configuration parameters for the routing subsystem.
message Routing {
  // Configuration of control-plane protocol instances.
  Routing_ControlPlaneProtocols control_plane_protocols = 1;
  // Network-layer interfaces used for routing.
  Routing_Interfaces interfaces = 2;
  // Configuration of RIBs.
  Routing_Ribs ribs = 3;
  // A 32-bit number in the form of a dotted quad that is used by
  // some routing protocols identifying a router.
  string router_id = 4;
}

// Configuration of control-plane protocol instances.
message Routing_ControlPlaneProtocols {
  // Each entry contains configuration of a control-plane
  // protocol instance.
  repeated Routing_ControlPlaneProtocols_ControlPlaneProtocol control_plane_protocol = 1;
}

// Each entry contains configuration of a control-plane
// protocol instance.
message Routing_ControlPlaneProtocols_ControlPlaneProtocol {
  // Textual description of the control-plane protocol
  // instance.
  string description = 1;
  // An arbitrary name of the control-plane protocol
  // instance.
  string name = 2;
  // Configuration of the 'static' pseudo-protocol.
  // 
  // Address-family-specific modules augment this node with
  // their lists of routes.
  Routing_ControlPlaneProtocol_StaticRoutes static_routes = 3;
  // Type of the control-plane protocol - an identity derived
  // from the 'control-plane-protocol' base identity.
  string type = 4;
}

// Configuration of the 'static' pseudo-protocol.
// 
// Address-family-specific modules augment this node with
// their lists of routes.
message Routing_ControlPlaneProtocol_StaticRoutes {
}

// Network-layer interfaces used for routing.
message Routing_Interfaces {
  // Each entry is a reference to the name of a configured
  // network-layer interface.
  repeated string interface = 1;
}

// Configuration of RIBs.
message Routing_Ribs {
  // Each entry contains configuration for a RIB identified by
  // the 'name' key.
  // 
  // Entries having the same key as a system-controlled entry
  // of the list /routing/ribs/rib are used for
  // configuring parameters of that entry.  Other entries
  // define additional user-controlled RIBs.
  repeated Routing_Ribs_Rib rib = 1;
}

// Each entry contains configuration for a RIB identified by
// the 'name' key.
// 
// Entries having the same key as a system-controlled entry
// of the list /routing/ribs/rib are used for
// configuring parameters of that entry.  Other entries
// define additional user-controlled RIBs.
message Routing_Ribs_Rib {
  // Address family.
  string address_family = 1;
  // This flag has the value of 'true' if and only if the RIB
  // is the default RIB for the given address family.
  // 
  // By default, control-plane protocols place their routes
  // in the default RIBs.
  bool default_rib = 2;
  // Textual description of the RIB.
  string description = 3;
  // The name of the RIB.
  // 
  // For system-controlled entries, the value of this leaf
  // must be the same as the name of the corresponding entry
  // in state data.
  // 
  // For user-controlled entries, an arbitrary name can be
  // used.
  string name = 4;
  // Current content of the RIB.
  Routing_Rib_Routes routes = 5;
}

// Return the active RIB route that is used for the
// destination address.
// 
// Address-family-specific modules MUST augment input
// parameters with a leaf named 'destination-address'.
message Routing_Rib_ActiveRoute {
}

// Current content of the RIB.
message Routing_Rib_Routes {
  // A RIB route entry.  This data node MUST be augmented
  // with information specific for routes of each address
  // family.
  repeated Routing_Rib_Routes_Route route = 1;
}

// A RIB route entry.  This data node MUST be augmented
// with information specific for routes of each address
// family.
message Routing_Rib_Routes_Route {
  // Presence of this leaf indicates that the route is preferred
  // among all routes in the same RIB that have the same
  // destination prefix.
  bool active = 1;
  // Time stamp of the last modification of the route.  If the
  // route was never modified, it is the time when the route was
  // inserted into the RIB.
  string last_updated = 2;
  // Route's next-hop attribute.
  Routing_Rib_Route_NextHop next_hop = 3;
  // This route attribute, also known as administrative
  // distance, allows for selecting the preferred route
  // among routes with the same destination prefix.  A
  // smaller value means a more preferred route.
  uint32 route_preference = 4;
  // Type of the routing protocol from which the route
  // originated.
  string source_protocol = 5;
}

// Route's next-hop attribute.
message Routing_Rib_Route_NextHop {
  // Options for next hops in state data.
  // 
  // It is expected that further cases will be added through
  // augments from other modules, e.g., for recursive
  // next hops.
  Routing_Rib_Route_NextHop_NextHopOptions next_hop_options = 1;
}

// Options for next hops in state data.
// 
// It is expected that further cases will be added through
// augments from other modules, e.g., for recursive
// next hops.
message Routing_Rib_Route_NextHop_NextHopOptions {
  Routing_Rib_Route_NextHop_NextHopOptions_NextHopList next_hop_list = 1;
  // This case represents a simple next hop consisting of the
  // next-hop address and/or outgoing interface.
  // 
  // Modules for address families MUST augment this case with a
  // leaf containing a next-hop address of that address
  // family.
  Routing_Rib_Route_NextHop_NextHopOptions_SimpleNextHop simple_next_hop = 2;
  Routing_Rib_Route_NextHop_NextHopOptions_SpecialNextHop special_next_hop = 3;
}

message Routing_Rib_Route_NextHop_NextHopOptions_NextHopList {
  // Container for multiple next hops.
  Routing_Rib_Route_NextHop_NextHopOptions_NextHopList_NextHopList next_hop_list = 1;
}

// Container for multiple next hops.
message Routing_Rib_Route_NextHop_NextHopOptions_NextHopList_NextHopList {
  // An entry of a next-hop list.
  // 
  // Modules for address families MUST augment this list
  // with a leaf containing a next-hop address of that
  // address family.
  repeated Routing_Rib_Route_NextHop_NextHopOptions_NextHopList_NextHopList_NextHop next_hop = 1;
}

// An entry of a next-hop list.
// 
// Modules for address families MUST augment this list
// with a leaf containing a next-hop address of that
// address family.
message Routing_Rib_Route_NextHop_NextHopOptions_NextHopList_NextHopList_NextHop {
  // Name of the outgoing interface.
  string outgoing_interface = 1;
}

// This case represents a simple next hop consisting of the
// next-hop address and/or outgoing interface.
// 
// Modules for address families MUST augment this case with a
// leaf containing a next-hop address of that address
// family.
message Routing_Rib_Route_NextHop_NextHopOptions_SimpleNextHop {
  // Name of the outgoing interface.
  string outgoing_interface = 1;
}

message Routing_Rib_Route_NextHop_NextHopOptions_SpecialNextHop {
  // Options for special next hops.
  enum SpecialNextHop {
    SpecialNextHop_BLACKHOLE = 0;
    SpecialNextHop_PROHIBIT = 1;
    SpecialNextHop_RECEIVE = 2;
    SpecialNextHop_UNREACHABLE = 3;
  };
  SpecialNextHop special_next_hop = 1;
}

// State data of the routing subsystem.
message RoutingState {
  // Container for the list of routing protocol instances.
  RoutingState_ControlPlaneProtocols control_plane_protocols = 1;
  // Network-layer interfaces used for routing.
  RoutingState_Interfaces interfaces = 2;
  // Container for RIBs.
  RoutingState_Ribs ribs = 3;
  // A 32-bit number in the form of a dotted quad that is used by
  // some routing protocols identifying a router.
  string router_id = 4;
}

// Container for the list of routing protocol instances.
message RoutingState_ControlPlaneProtocols {
  // State data of a control-plane protocol instance.
  // 
  // An implementation MUST provide exactly one
  // system-controlled instance of the 'direct'
  // pseudo-protocol.  Instances of other control-plane
  // protocols MAY be created by configuration.
  repeated RoutingState_ControlPlaneProtocols_ControlPlaneProtocol control_plane_protocol = 1;
}

// State data of a control-plane protocol instance.
// 
// An implementation MUST provide exactly one
// system-controlled instance of the 'direct'
// pseudo-protocol.  Instances of other control-plane
// protocols MAY be created by configuration.
message RoutingState_ControlPlaneProtocols_ControlPlaneProtocol {
  // The name of the control-plane protocol instance.
  // 
  // For system-controlled instances this name is
  // persistent, i.e., it SHOULD NOT change across
  // reboots.
  string name = 1;
  // Type of the control-plane protocol.
  string type = 2;
}

// Network-layer interfaces used for routing.
message RoutingState_Interfaces {
  // Each entry is a reference to the name of a configured
  // network-layer interface.
  repeated string interface = 1;
}

// Container for RIBs.
message RoutingState_Ribs {
  // Each entry represents a RIB identified by the 'name'
  // key. All routes in a RIB MUST belong to the same address
  // family.
  // 
  // An implementation SHOULD provide one system-controlled
  // default RIB for each supported address family.
  repeated RoutingState_Ribs_Rib rib = 1;
}

// Each entry represents a RIB identified by the 'name'
// key. All routes in a RIB MUST belong to the same address
// family.
// 
// An implementation SHOULD provide one system-controlled
// default RIB for each supported address family.
message RoutingState_Ribs_Rib {
  // Address family.
  string address_family = 1;
  // This flag has the value of 'true' if and only if the
  // RIB is the default RIB for the given address family.
  // 
  // By default, control-plane protocols place their routes
  // in the default RIBs.
  bool default_rib = 2;
  // The name of the RIB.
  string name = 3;
  // Current content of the RIB.
  RoutingState_Rib_Routes routes = 4;
}

// Return the active RIB route that is used for the
// destination address.
// 
// Address-family-specific modules MUST augment input
// parameters with a leaf named 'destination-address'.
message RoutingState_Rib_ActiveRoute {
}

// Current content of the RIB.
message RoutingState_Rib_Routes {
  // A RIB route entry.  This data node MUST be augmented
  // with information specific for routes of each address
  // family.
  repeated RoutingState_Rib_Routes_Route route = 1;
}

// A RIB route entry.  This data node MUST be augmented
// with information specific for routes of each address
// family.
message RoutingState_Rib_Routes_Route {
  // Presence of this leaf indicates that the route is preferred
  // among all routes in the same RIB that have the same
  // destination prefix.
  bool active = 1;
  // Time stamp of the last modification of the route.  If the
  // route was never modified, it is the time when the route was
  // inserted into the RIB.
  string last_updated = 2;
  // Route's next-hop attribute.
  RoutingState_Rib_Route_NextHop next_hop = 3;
  // This route attribute, also known as administrative
  // distance, allows for selecting the preferred route
  // among routes with the same destination prefix.  A
  // smaller value means a more preferred route.
  uint32 route_preference = 4;
  // Type of the routing protocol from which the route
  // originated.
  string source_protocol = 5;
}

// Route's next-hop attribute.
message RoutingState_Rib_Route_NextHop {
  // Options for next hops in state data.
  // 
  // It is expected that further cases will be added through
  // augments from other modules, e.g., for recursive
  // next hops.
  RoutingState_Rib_Route_NextHop_NextHopOptions next_hop_options = 1;
}

// Options for next hops in state data.
// 
// It is expected that further cases will be added through
// augments from other modules, e.g., for recursive
// next hops.
message RoutingState_Rib_Route_NextHop_NextHopOptions {
  RoutingState_Rib_Route_NextHop_NextHopOptions_NextHopList next_hop_list = 1;
  // This case represents a simple next hop consisting of the
  // next-hop address and/or outgoing interface.
  // 
  // Modules for address families MUST augment this case with a
  // leaf containing a next-hop address of that address
  // family.
  RoutingState_Rib_Route_NextHop_NextHopOptions_SimpleNextHop simple_next_hop = 2;
  RoutingState_Rib_Route_NextHop_NextHopOptions_SpecialNextHop special_next_hop = 3;
}

message RoutingState_Rib_Route_NextHop_NextHopOptions_NextHopList {
  // Container for multiple next hops.
  RoutingState_Rib_Route_NextHop_NextHopOptions_NextHopList_NextHopList next_hop_list = 1;
}

// Container for multiple next hops.
message RoutingState_Rib_Route_NextHop_NextHopOptions_NextHopList_NextHopList {
  // An entry of a next-hop list.
  // 
  // Modules for address families MUST augment this list
  // with a leaf containing a next-hop address of that
  // address family.
  repeated RoutingState_Rib_Route_NextHop_NextHopOptions_NextHopList_NextHopList_NextHop next_hop = 1;
}

// An entry of a next-hop list.
// 
// Modules for address families MUST augment this list
// with a leaf containing a next-hop address of that
// address family.
message RoutingState_Rib_Route_NextHop_NextHopOptions_NextHopList_NextHopList_NextHop {
  // Name of the outgoing interface.
  string outgoing_interface = 1;
}

// This case represents a simple next hop consisting of the
// next-hop address and/or outgoing interface.
// 
// Modules for address families MUST augment this case with a
// leaf containing a next-hop address of that address
// family.
message RoutingState_Rib_Route_NextHop_NextHopOptions_SimpleNextHop {
  // Name of the outgoing interface.
  string outgoing_interface = 1;
}

message RoutingState_Rib_Route_NextHop_NextHopOptions_SpecialNextHop {
  // Options for special next hops.
  enum SpecialNextHop {
    SpecialNextHop_BLACKHOLE = 0;
    SpecialNextHop_PROHIBIT = 1;
    SpecialNextHop_RECEIVE = 2;
    SpecialNextHop_UNREACHABLE = 3;
  };
  SpecialNextHop special_next_hop = 1;
}

// Do not delete the lines below, they preserve tag information for goyang.
// goyang-tag Routing control_plane_protocols/Routing_ControlPlaneProtocols 1
// goyang-tag Routing interfaces/Routing_Interfaces 2
// goyang-tag Routing ribs/Routing_Ribs 3
// goyang-tag Routing router_id/string 4
// goyang-tag RoutingState control_plane_protocols/RoutingState_ControlPlaneProtocols 1
// goyang-tag RoutingState interfaces/RoutingState_Interfaces 2
// goyang-tag RoutingState ribs/RoutingState_Ribs 3
// goyang-tag RoutingState router_id/string 4
// goyang-tag RoutingState_ControlPlaneProtocols control_plane_protocol/RoutingState_ControlPlaneProtocols_ControlPlaneProtocol[] 1
// goyang-tag RoutingState_ControlPlaneProtocols_ControlPlaneProtocol name/string 1
// goyang-tag RoutingState_ControlPlaneProtocols_ControlPlaneProtocol type/string 2
// goyang-tag RoutingState_Interfaces interface/string[] 1
// goyang-tag RoutingState_Rib_ActiveRoute_ActiveRouteResponse route/RoutingState_Rib_ActiveRoute_ActiveRouteResponse_Route 1
// goyang-tag RoutingState_Rib_Route_NextHop next_hop_options/RoutingState_Rib_Route_NextHop_NextHopOptions 1
// goyang-tag RoutingState_Rib_Route_NextHop_NextHopOptions next_hop_list/RoutingState_Rib_Route_NextHop_NextHopOptions_NextHopList 1
// goyang-tag RoutingState_Rib_Route_NextHop_NextHopOptions simple_next_hop/RoutingState_Rib_Route_NextHop_NextHopOptions_SimpleNextHop 2
// goyang-tag RoutingState_Rib_Route_NextHop_NextHopOptions special_next_hop/RoutingState_Rib_Route_NextHop_NextHopOptions_SpecialNextHop 3
// goyang-tag RoutingState_Rib_Route_NextHop_NextHopOptions_NextHopList next_hop_list/RoutingState_Rib_Route_NextHop_NextHopOptions_NextHopList_NextHopList 1
// goyang-tag RoutingState_Rib_Route_NextHop_NextHopOptions_NextHopList_NextHopList next_hop/RoutingState_Rib_Route_NextHop_NextHopOptions_NextHopList_NextHopList_NextHop[] 1
// goyang-tag RoutingState_Rib_Route_NextHop_NextHopOptions_NextHopList_NextHopList_NextHop outgoing_interface/string 1
// goyang-tag RoutingState_Rib_Route_NextHop_NextHopOptions_SimpleNextHop outgoing_interface/string 1
// goyang-tag RoutingState_Rib_Route_NextHop_NextHopOptions_SpecialNextHop special_next_hop/SpecialNextHop 1
// goyang-tag RoutingState_Rib_Routes route/RoutingState_Rib_Routes_Route[] 1
// goyang-tag RoutingState_Rib_Routes_Route active/bool 1
// goyang-tag RoutingState_Rib_Routes_Route last_updated/string 2
// goyang-tag RoutingState_Rib_Routes_Route next_hop/RoutingState_Rib_Route_NextHop 3
// goyang-tag RoutingState_Rib_Routes_Route route_preference/uint32 4
// goyang-tag RoutingState_Rib_Routes_Route source_protocol/string 5
// goyang-tag RoutingState_Ribs rib/RoutingState_Ribs_Rib[] 1
// goyang-tag RoutingState_Ribs_Rib address_family/string 1
// goyang-tag RoutingState_Ribs_Rib default_rib/bool 2
// goyang-tag RoutingState_Ribs_Rib name/string 3
// goyang-tag RoutingState_Ribs_Rib routes/RoutingState_Rib_Routes 4
// goyang-tag Routing_ControlPlaneProtocols control_plane_protocol/Routing_ControlPlaneProtocols_ControlPlaneProtocol[] 1
// goyang-tag Routing_ControlPlaneProtocols_ControlPlaneProtocol description/string 1
// goyang-tag Routing_ControlPlaneProtocols_ControlPlaneProtocol name/string 2
// goyang-tag Routing_ControlPlaneProtocols_ControlPlaneProtocol static_routes/Routing_ControlPlaneProtocol_StaticRoutes 3
// goyang-tag Routing_ControlPlaneProtocols_ControlPlaneProtocol type/string 4
// goyang-tag Routing_Interfaces interface/string[] 1
// goyang-tag Routing_Rib_ActiveRoute_ActiveRouteResponse route/Routing_Rib_ActiveRoute_ActiveRouteResponse_Route 1
// goyang-tag Routing_Rib_Route_NextHop next_hop_options/Routing_Rib_Route_NextHop_NextHopOptions 1
// goyang-tag Routing_Rib_Route_NextHop_NextHopOptions next_hop_list/Routing_Rib_Route_NextHop_NextHopOptions_NextHopList 1
// goyang-tag Routing_Rib_Route_NextHop_NextHopOptions simple_next_hop/Routing_Rib_Route_NextHop_NextHopOptions_SimpleNextHop 2
// goyang-tag Routing_Rib_Route_NextHop_NextHopOptions special_next_hop/Routing_Rib_Route_NextHop_NextHopOptions_SpecialNextHop 3
// goyang-tag Routing_Rib_Route_NextHop_NextHopOptions_NextHopList next_hop_list/Routing_Rib_Route_NextHop_NextHopOptions_NextHopList_NextHopList 1
// goyang-tag Routing_Rib_Route_NextHop_NextHopOptions_NextHopList_NextHopList next_hop/Routing_Rib_Route_NextHop_NextHopOptions_NextHopList_NextHopList_NextHop[] 1
// goyang-tag Routing_Rib_Route_NextHop_NextHopOptions_NextHopList_NextHopList_NextHop outgoing_interface/string 1
// goyang-tag Routing_Rib_Route_NextHop_NextHopOptions_SimpleNextHop outgoing_interface/string 1
// goyang-tag Routing_Rib_Route_NextHop_NextHopOptions_SpecialNextHop special_next_hop/SpecialNextHop 1
// goyang-tag Routing_Rib_Routes route/Routing_Rib_Routes_Route[] 1
// goyang-tag Routing_Rib_Routes_Route active/bool 1
// goyang-tag Routing_Rib_Routes_Route last_updated/string 2
// goyang-tag Routing_Rib_Routes_Route next_hop/Routing_Rib_Route_NextHop 3
// goyang-tag Routing_Rib_Routes_Route route_preference/uint32 4
// goyang-tag Routing_Rib_Routes_Route source_protocol/string 5
// goyang-tag Routing_Ribs rib/Routing_Ribs_Rib[] 1
// goyang-tag Routing_Ribs_Rib address_family/string 1
// goyang-tag Routing_Ribs_Rib default_rib/bool 2
// goyang-tag Routing_Ribs_Rib description/string 3
// goyang-tag Routing_Ribs_Rib name/string 4
// goyang-tag Routing_Ribs_Rib routes/Routing_Rib_Routes 5
